val casioCharset = List(
"�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�","�"," ","!","\\","\"","#","$","%","&","'","(",")","*","+",",","-",".","/","0","1","2","3","4","5","6","7","8","9",":",";","<","=",">","?","@","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","[","¥","]","^","_","`","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","{","|","}","~","�","Å","∫","√","'","∑","Ω","▒","█","𝛼","𝛽","𝛾","𝜀","𝜃","𝜇","𝜎","𝜙","⁰","¹","²","³","⁴","⁵","⁶","⁷","⁸","⁹","⁺","⁻","ⁿ","﹪","¬","÷","�"," ","̻","⌜","⌟","､","･","ｦ","ｧ","ｨ","ｩ","ｪ","ｫ","ｬ","ｭ","ｮ","ｯ","ｰ","ｱ","ｲ","ｳ","ｴ","ｵ","ｶ","ｷ","ｸ","ｹ","ｺ","ｻ","ｼ","ｽ","ｾ","ｿ","ﾀ","ﾁ","ﾂ","ﾃ","ﾄ","ﾅ","ﾆ","ﾇ","ﾈ","ﾉ","ﾊ","ﾋ","ﾌ","ﾍ","ﾎ","ﾏ","ﾐ","ﾑ","ﾒ","ﾓ","ﾔ","ﾕ","ﾖ","ﾗ","ﾘ","ﾙ","ﾚ","ﾛ","ﾜ","ﾝ","ﾞ","ﾟ","≥","≤","≠","↑","←","↓","→","π","♠","︎","♥","︎","♣","︎","♦","◻","▢","△","\\","×","�","�","�","�","�","�","£","¢","±","∓","₀","�","�","�","�")

val charIndex = Range(0,255)

val casioToUnicode = charIndex.zip(casioCharset).toMap
val unicodeToCasio = casioCharset.zip(charIndex).toMap

def toUnicode(casioAscii: Int): String = {
  casioToUnicode(casioAscii)
}

def toCasio(unicode: String): Int = {
  unicodeToCasio(unicode)
}

toCasio("≥")
toUnicode(32)

